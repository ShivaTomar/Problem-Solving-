Data Structures
Dynamic Array
Linked List
Stack & Queue
Hash Tables
Binary Search Tree
Binary Heaps & Priority Queue
Graphs
Trie


Algorithms
Bit Manipulation & Numbers — difference btw Unsigned vs signed numbers
Stability in Sorting
Mergesort
Quicksort
Heapsort — Sort it in-place to get O(1) space
Binary Search
Selections — Kth Smallest Elements (Sort, QuickSelect, Mediums of Mediums) — Implement all three ways
Permutations
Subsets
BFS Graph
DFS Graph
Dijkstra’s Algorithm (just learn the idea — no need to implement)
Tree Traversals — BFS, DFS (in-order, pre-order, post-order): Implement Recursive and Iterative
External Sort — No implementation; Just know the concept.
NP-Complete (Video) — Just know the concept
Topological Sort
Detect cycle in an undirected graph
Detect a cycle in a directed graph
Count connected components in a graph
Find strongly connected components in a graph

Prep work
Once you are comfortable with the data structures & algorithms above, do the following exercise multiple times (at least 2–3 times) until you can do them with your eyes closed.
Implement an ArrayList from scratch

Reverse a linked list
Implement a Stack & a Queue using Array
Implement a HashTable with simple Hashing functions
Implement a Graph using Adjacency List, and then write functions for BFS & DFS.
Write the binary search algorithm both recursively and iteratively
Write the merge sort algorithm
Write the quicksort algorithm
Print binary tree using DFS (in-order, preorder and post order — all three of them) and BFS.
Memorize time & space complexities for common algorithms. Here’s an interesting website.(https://www.bigocheatsheet.com/)
Implement a trie.
Learn these important bit manipulation tricks.